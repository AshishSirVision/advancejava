Before we proceed, let me explain three important terms \u2212
\u2022	Internationalization (i18n) \u2212 This means enabling a web site to provide different versions of content translated into the visitor's language or nationality
\u2022	Localization (l10n) \u2212 This means adding resources to a web site to adapt to a particular geographical or cultural region.
\u2022	locale \u2212 This is a particular cultural or geographical region. It is usually referred to as a language symbol followed by a country symbol which is separated by an underscore. For example "en_US" represents English locale for US.
There are number of items which should be taken care while building up a global website. This tutorial would not give you complete detail on this but it would give you a good example on how you can offer your web page in different languages to internet community by differentiating their location i.e. locale.
A servlet can pickup appropriate version of the site based on the requester's locale and provide appropriate site version according to the local language, culture and requirements. Following is the method of request object which returns Locale object.
java.util.Locale request.getLocale() 
Detecting Locale
Following are the important locale methods which you can use to detect requester's location, language and of course locale. All the below methods display country name and language name set in requester's browser.
Sr.No.	Method & Description
1	String getCountry()
This method returns the country/region code in upper case for this locale in ISO 3166 2-letter format.
2	String getDisplayCountry()
This method returns a name for the locale's country that is appropriate for display to the user.
3	String getLanguage()
This method returns the language code in lower case for this locale in ISO 639 format.
4	String getDisplayLanguage()
This method returns a name for the locale's language that is appropriate for display to the user.
5	String getISO3Country()
This method returns a three-letter abbreviation for this locale's country.
6	String getISO3Language()
This method returns a three-letter abbreviation for this locale's language.
Example
This example shows how you display a language and associated country for a request \u2212
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
import java.util.Locale;

public class GetLocale extends HttpServlet {

   public void doGet(HttpServletRequest request, HttpServletResponse response)
      throws ServletException, IOException {
   
      //Get the client's Locale
      Locale locale = request.getLocale();
      String language = locale.getLanguage();
      String country = locale.getCountry();

      // Set response content type
      response.setContentType("text/html");
      PrintWriter out = response.getWriter();

      String title = "Detecting Locale";
      String docType =
         "<!doctype html public \"-//w3c//dtd html 4.0 " + "transitional//en\">\n";
      
      out.println(docType +
         "<html>\n" +
            "<head><title>" + title + "</title></head>\n" +
            "<body bgcolor = \"#f0f0f0\">\n" +
               "<h1 align = \"center\">" + language + "</h1>\n" +
               "<h2 align = \"center\">" + country + "</h2>\n" +
         "</body>
         </html>"
      );
   }
} 
Languages Setting
A servlet can output a page written in a Western European language such as English, Spanish, German, French, Italian, Dutch etc. Here it is important to set ContentLanguage header to display all the characters properly.
Second point is to display all the special characters using HTML entities, For example, "&#241;" represents "ñ", and "&#161;" represents "¡" as follows:
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
import java.util.Locale;

public class DisplaySpanish extends HttpServlet {

   public void doGet(HttpServletRequest request, HttpServletResponse response)
      throws ServletException, IOException {

      // Set response content type
      response.setContentType("text/html");
      PrintWriter out = response.getWriter();

      // Set spanish language code.
      response.setHeader("Content-Language", "es");

      String title = "En Espa&ntilde;ol";
      String docType =
      "<!doctype html public \"-//w3c//dtd html 4.0 " + "transitional//en\">\n";
      
      out.println(docType +
         "<html>\n" +
            "<head><title>" + title + "</title></head>\n" +
            "<body bgcolor = \"#f0f0f0\">\n" +
               "<h1>" + "En Espa&ntilde;ol:" + "</h1>\n" +
               "<h1>" + "&iexcl;Hola Mundo!" + "</h1>\n" +
            "</body>
         </html>"
      );
   }
} 
Locale Specific Dates
You can use the java.text.DateFormat class and its static getDateTimeInstance() method to format date and time specific to locale. Following is the example which shows how to format dates specific to a given locale \u2212
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
import java.util.Locale;
import java.text.DateFormat;
import java.util.Date;

public class DateLocale extends HttpServlet {

   public void doGet(HttpServletRequest request, HttpServletResponse response)
      throws ServletException, IOException {
      
      // Set response content type
      response.setContentType("text/html");
      PrintWriter out = response.getWriter();
      
      //Get the client's Locale
      Locale locale = request.getLocale( );
      String date = DateFormat.getDateTimeInstance(DateFormat.FULL, 
         DateFormat.SHORT, locale).format(new Date( ));

      String title = "Locale Specific Dates";
      String docType =
         "<!doctype html public \"-//w3c//dtd html 4.0 " + "transitional//en\">\n";
     
      out.println(docType +
         "<html>\n" +
            "<head><title>" + title + "</title></head>\n" +
            "<body bgcolor = \"#f0f0f0\">\n" +
               "<h1 align = \"center\">" + date + "</h1>\n" +
            "</body>
         </html>"
      );
   }
} 
Locale Specific Currency
You can use the java.txt.NumberFormat class and its static getCurrencyInstance() method to format a number, such as a long or double type, in a locale specific currency. Following is the example which shows how to format currency specific to a given locale \u2212
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
import java.util.Locale;
import java.text.NumberFormat;
import java.util.Date;

public class CurrencyLocale extends HttpServlet {
    
   public void doGet(HttpServletRequest request, HttpServletResponse response)
      throws ServletException, IOException {

      // Set response content type
      response.setContentType("text/html");
      PrintWriter out = response.getWriter();

      //Get the client's Locale
      Locale locale = request.getLocale( );
      NumberFormat nft = NumberFormat.getCurrencyInstance(locale);
      String formattedCurr = nft.format(1000000);

      String title = "Locale Specific Currency";
      String docType =
         "<!doctype html public \"-//w3c//dtd html 4.0 " + "transitional//en\">\n";
      
      out.println(docType +
         "<html>\n" +
            "<head><title>" + title + "</title></head>\n" +
            "<body bgcolor = \"#f0f0f0\">\n" +
               "<h1 align = \"center\">" + formattedCurr + "</h1>\n" +
            "</body>
         </html>"
      );
   }
} 
Locale Specific Percentage
You can use the java.txt.NumberFormat class and its static getPercentInstance() method to get locale specific percentage. Following is the example which shows how to format percentage specific to a given locale \u2212
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
import java.util.Locale;
import java.text.NumberFormat;
import java.util.Date;

public class PercentageLocale extends HttpServlet {

   public void doGet(HttpServletRequest request, HttpServletResponse response)
      throws ServletException, IOException {
      
      // Set response content type
      response.setContentType("text/html");
      PrintWriter out = response.getWriter();
      
      //Get the client's Locale
      Locale locale = request.getLocale( );
      NumberFormat nft = NumberFormat.getPercentInstance(locale);
      String formattedPerc = nft.format(0.51);

      String title = "Locale Specific Percentage";
      String docType =
      "<!doctype html public \"-//w3c//dtd html 4.0 " + "transitional//en\">\n";
      
      out.println(docType +
         "<html>\n" +
            "<head><title>" + title + "</title></head>\n" +
            "<body bgcolor = \"#f0f0f0\">\n" +
               "<h1 align = \"center\">" + formattedPerc + "</h1>\n" +
            "</body>
         </html>"
      );
   }
} 
\u2003
Multiple CheckBox Example
In this section we will discuss about the multiple selectable options. This example will illustrate you that if any one want to choose multiple options then how it will be possible. The example given below is focusing on such problem. Here we will make multiple checkbox options that one can choose one or more options.
checkBox.html
<html>
<head>
<title>CheckBox Example</title>
</head>
<body bgcolor="pink">
<form method="get" action="CheckBox">
<p>Enter your name <input type="text" name="name" /></p>
<h3>Select your hobbies</h3>
<p><input type="checkbox" name="hobbies" value="Gardening" />
Gardening</p>
<p><input type="checkbox" name="hobbies" value="Playing Game" />
Playing Game</p>
<p><input type="checkbox" name="hobbies" value="Reading Book" />
Reading Book</p>
<p><input type="checkbox" name="hobbies" value="Listening Music" />
Listening Music</p>
<p><input type="checkbox" name="hobbies" value="Jogging" /> Jogging</p>
<p><input type="checkbox" name="hobbies"
value="Chat with net friends" /> Chat with net friends</p>
<p><input type="submit" value="Submit"></input></p>
</form>
</body>
</html>
CheckBox.java
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
public class CheckBox extends HttpServlet{
public void doGet(HttpServletRequest req, HttpServletResponse res)throws ServletException, IOException{
String name;
String[] hobbies;
res.setContentType("text/html");
name= req.getParameter("name");
PrintWriter pw = res.getWriter();
hobbies= req.getParameterValues("hobbies");
if(hobbies!=null)
{
pw.println("<html><body bgcolor=#00fffff>");
pw.println("Hi I am <h4>"+name+".</h4><br>");
pw.println("My hobby/hobbies are:");
for(int i=0; i<hobbies.length; i++){
pw.println(hobbies[i]+",");
}
pw.println("</body></html>");
}
else
pw.println("<p><font color=red>not selected</font></p>");
}
}
web.xml
<servlet>
<servlet-name>bipul2</servlet-name>
<servlet-class>CheckBox</servlet-class>
</servlet>
<servlet-mapping>
<servlet-name>bipul2</servlet-name>
<url-pattern>/CheckBox</url-pattern>
</servlet-mapping>
Output :
When you will run the html file then the following page will display.
 
When you will select the CheckBoxes and click on submit the following page will display.
 
If you will not select the any option then the following page will display
 
RadioButton Example
In this section we will show you how the radio button is used. The following example illustrate you the use of Radio button. Radio button has a feature that it selects only one item at a time. The example given below is describing its features.
RadioButton.html
<html>
<head>
<title>Radio button example</title>
</head>
<body>
<form method="get" action="RadioButton">
<h2>Select your favorite dish</h2>
<p><input type="radio" name="dish" value="Indian"> Indian</input></p>
<p><input type="radio" name="dish" value="Continental">
Continental</input></p>
<p><input type="radio" name="dish" value="Chinese"> Chinese</input></p>
<p><input type="radio" name="dish" value="Italian"> Italian</input></p>
<p><input type="radio" name="dish" value="Russian"> Russian</input></p>
<input type="submit" value="Submit"></form>
</body>
</html>
RadioButton.java
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class RadioButton extends HttpServlet {
public void doGet(HttpServletRequest req, HttpServletResponse res)
throws ServletException, IOException {
String value;
res.setContentType("text/html");
value = req.getParameter("dish");
PrintWriter pw = res.getWriter();
pw.println("<html><body bgcolor=green>");
pw.println("<h3>Your favorite dish is = <font color=yellow>" + value
+ "</font></h3>");
}
}
web.xml
<servlet>
<servlet-name>bipul1</servlet-name>
<servlet-class>RadioButton</servlet-class>
</servlet>
<servlet-mapping>
<servlet-name>bipul1</servlet-name>
<url-pattern>/RadioButton</url-pattern>
</servlet-mapping>
Output :
 
 
How to read text file in Servlets
In this section, you will learn how to read text file in servlets.
In this section, you will learn how to read text file in servlets.

How to read text file in Servlets
         
This section illustrates you how to read text file in servlets.
In this example we will use the input stream to read the text from the disk file. The InputStreamReader class is used to read the file in servlets program. You can use this code in your application to read some information from a file.
Create a file message.properties in the /WEB-INF/ directory. We will read the content of this file and display in the browser. 
Get the file InputStream using ServletContext.getResourceAsStream() method. If input stream is not equal to null, create the object of InputStreamReader and pass it to the BufferedReader. A variable text is defined of String type. Read the file line by line using the while loop  ((text = reader.readLine()) != null). Then the writer.println(text) is used to display the content of the file
Here is the file message.properties which is going to be read through a servlets.
 
Hello World!

Where there is a will, there is a way.

Here is the code of ReadTextFile.java
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
 
public class ReadTextFile extends HttpServlet {
  protected void doGet(HttpServletRequest request,
  HttpServletResponse response) throws ServletException, IOException {
  
  response.setContentType("text/html");
  String filename = "/WEB-INF/message.properties";
  ServletContext context = getServletContext();
  
  InputStream inp = context.getResourceAsStream(filename);
  if (inp != null) {
  InputStreamReader isr = new InputStreamReader(inp);
  BufferedReader reader = new BufferedReader(isr);
  PrintWriter pw = response.getWriter();
  pw.println("<html><head><title>Read Text File</title></head>
<body bgcolor='cyan'></body></html>");
  String text = "";
  
  while ((text = reader.readLine()) != null) {
  pw.println("<h2><i><b>"+text+"</b></i></b><br>");
  }
  }
  }
  protected void doPost(HttpServletRequest request,
  HttpServletResponse response) throws ServletException, IOException {
  }
}


This will read the file and following output will be displayed on your browser
 
 
 
Get all Request Headers in Servlet
Posted by: Byron Kiourtzoglou in servlet November 11th, 2012 1 Comment 12617 Views
This is an example on how to get all the Request Headers in a Servlet. This is to make it easy for the programmer to parse an HTTP request object and decide on the response you will provide.
In short in order to get all request headers in Servlet, on should follow these steps:
ADVERTISEMENT
4 Java Programming Tips for Beginners
 
\u2022	Create a handleRequest method so you can use it both in doGet and doPost methods.
\u2022	Use HttpServletRequest.getHeaderNames() to get an Enumeration of header names.
\u2022	Use HttpServletRequest.getHeaders(headerName) to get the value of a specific header.
Want to be a Servlets Master ?
Subscribe to our newsletter and download the Java Servlet Ultimate Guide right now!
In order to help you master programming with Java Servlets, we have compiled a kick-ass guide with all the major servlet API uses and showcases! Besides studying them online you may download the eBook in PDF format!
 
Download NOW!
 
Here is the code:
package com.javacodegeeks.snippets.enterprise;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Enumeration;

import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class GetAllRequestHeadersInServlet extends HttpServlet {

	private static final long serialVersionUID = -2128122335811219481L;

	public void doGet(HttpServletRequest req, HttpServletResponse res) throws IOException {
		handleRequest(req, res);
	}

	public void doPost(HttpServletRequest req, HttpServletResponse res) throws IOException {
		handleRequest(req, res);
	}

	public void handleRequest(HttpServletRequest req, HttpServletResponse res) throws IOException {

		PrintWriter out = res.getWriter();
		res.setContentType("text/plain");

		Enumeration<String> headerNames = req.getHeaderNames();

		while (headerNames.hasMoreElements()) {

			String headerName = headerNames.nextElement();
			out.write(headerName);
			out.write("n");

			Enumeration<String> headers = req.getHeaders(headerName);
			while (headers.hasMoreElements()) {
				String headerValue = headers.nextElement();
				out.write("t" + headerValue);
				out.write("n");
			}

		}

		out.close();

	}

}
web.xml
<?xml version="1.0" encoding="UTF-8"?>

<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
  xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
  version="2.5">

	<display-name>JCG Snippets Web Project</display-name>

	<servlet>
		<servlet-name>JCG Snippets Application</servlet-name>
		<servlet-class>com.javacodegeeks.snippets.enterprise.GetAllRequestHeadersInServlet</servlet-class>
	</servlet>

	<servlet-mapping>
		<servlet-name>JCG Snippets Application</servlet-name>
		<url-pattern>/jcgservlet</url-pattern>
	</servlet-mapping>

</web-app>
URL:
http://myhost:8080/jcgsnippets/jcgservlet
Output:
host
	myhost:8080
user-agent
	Mozilla/5.0 (Windows NT 6.1; WOW64; rv:8.0) Gecko/20100101 Firefox/8.0
accept
	text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
accept-language
	en-us,en;q=0.5
accept-encoding
	gzip, deflate
accept-charset
	ISO-8859-1,utf-8;q=0.7,*;q=0.7
connection
	keep-alive
cache-control
	max-age=0
This was an example on how to get all Request Headers in Servlet.
One of the most important advantages of using Servlet is that you can use most of the methods available in core Java. This tutorial would take you through Java provided Date class which is available in java.util package, this class encapsulates the current date and time.
The Date class supports two constructors. The first constructor initializes the object with the current date and time.
Date( )
The following constructor accepts one argument that equals the number of milliseconds that have elapsed since midnight, January 1, 1970
Date(long millisec)
Once you have a Date object available, you can call any of the following support methods to play with dates \u2212
Sr.No.	Methods & Description
1	boolean after(Date date)
Returns true if the invoking Date object contains a date that is later than the one specified by date, otherwise, it returns false.
2	boolean before(Date date)
Returns true if the invoking Date object contains a date that is earlier than the one specified by date, otherwise, it returns false.
3	Object clone( )
Duplicates the invoking Date object.
4	int compareTo(Date date)
Compares the value of the invoking object with that of date. Returns 0 if the values are equal. Returns a negative value if the invoking object is earlier than date. Returns a positive value if the invoking object is later than date.
5	int compareTo(Object obj)
Operates identically to compareTo(Date) if obj is of class Date. Otherwise, it throws a ClassCastException.
6	boolean equals(Object date)
Returns true if the invoking Date object contains the same time and date as the one specified by date, otherwise, it returns false.
7	long getTime( )
Returns the number of milliseconds that have elapsed since January 1, 1970.
8	int hashCode( )
Returns a hash code for the invoking object.
9	void setTime(long time)
Sets the time and date as specified by time, which represents an elapsed time in milliseconds from midnight, January 1, 1970.
10	String toString( )
Converts the invoking Date object into a string and returns the result.
Getting Current Date & Time
This is very easy to get current date and time in Java Servlet. You can use a simple Date object with toString() method to print current date and time as follows \u2212
// Import required java libraries
import java.io.*;
import java.util.Date;
import javax.servlet.*;
import javax.servlet.http.*;
 
// Extend HttpServlet class
public class CurrentDate extends HttpServlet {
 
   public void doGet(HttpServletRequest request, HttpServletResponse response)
      throws ServletException, IOException {
      
      // Set response content type
      response.setContentType("text/html");
 
      PrintWriter out = response.getWriter();
      String title = "Display Current Date & Time";
      Date date = new Date();
      String docType = "<!doctype html public \"-//w3c//dtd html 4.0 " + "transitional//en\">\n";
      
      out.println(docType +
         "<html>\n" +
            "<head><title>" + title + "</title></head>\n" +
            "<body bgcolor = \"#f0f0f0\">\n" +
               "<h1 align = \"center\">" + title + "</h1>\n" +
               "<h2 align = \"center\">" + date.toString() + "</h2>\n" +
            "</body>
         </html>"
      );
   }
}
Now let us compile above servlet and create appropriate entries in web.xml and then call this servlet using URL http://localhost:8080/CurrentDate. This would produce following result \u2212
Display Current Date & Time

Mon Jun 21 21:46:49 GMT+04:00 2010

Try to refresh URL http://localhost:8080/CurrentDate and you would find difference in seconds every time you would refresh.
Date Comparison
As I mentioned above you can use all the available Java methods in your Servlet. In case you need to compare two dates, following are the methods \u2212
\u2022	You can use getTime( ) to obtain the number of milliseconds that have elapsed since midnight, January 1, 1970, for both objects and then compare these two values.
\u2022	You can use the methods before( ), after( ), and equals( ). Because the 12th of the month comes before the 18th, for example, new Date(99, 2, 12).before(new Date (99, 2, 18)) returns true.
\u2022	You can use the compareTo( ) method, which is defined by the Comparable interface and implemented by Date.
Date Formatting using SimpleDateFormat
SimpleDateFormat is a concrete class for formatting and parsing dates in a localesensitive manner. SimpleDateFormat allows you to start by choosing any user-defined patterns for date-time formatting.
Let us modify above example as follows \u2212
// Import required java libraries
import java.io.*;
import java.text.*;
import java.util.Date;
import javax.servlet.*;
import javax.servlet.http.*;
 
// Extend HttpServlet class
public class CurrentDate extends HttpServlet {
 
   public void doGet(HttpServletRequest request, HttpServletResponse response)
      throws ServletException, IOException {
      
      // Set response content type
      response.setContentType("text/html");
 
      PrintWriter out = response.getWriter();
      String title = "Display Current Date & Time";
      Date dNow = new Date( );
      SimpleDateFormat ft = new SimpleDateFormat ("E yyyy.MM.dd 'at' hh:mm:ss a zzz");
      String docType = "<!doctype html public \"-//w3c//dtd html 4.0 " + "transitional//en\">\n";
      
      out.println(docType +
         "<html>\n" +
            "<head><title>" + title + "</title></head>\n" +
            "<body bgcolor = \"#f0f0f0\">\n" +
               "<h1 align = \"center\">" + title + "</h1>\n" +
               "<h2 align = \"center\">" + ft.format(dNow) + "</h2>\n" +
            "</body>
         </html>"
      );
   }
}
Compile above servlet once again and then call this servlet using URL http://localhost:8080/CurrentDate. This would produce following result \u2212
Display Current Date & Time

Mon 2010.06.21 at 10:06:44 PM GMT+04:00

Simple DateFormat Format Codes
To specify the time format use a time pattern string. In this pattern, all ASCII letters are reserved as pattern letters, which are defined as the following \u2212
Character	Description	Example
G	Era designator	AD
y	Year in four digits	2001
M	Month in year	July or 07
d	Day in month	10
h	Hour in A.M./P.M. (1~12)	12
H	Hour in day (0~23)	22
m	Minute in hour	30
s	Second in minute	55
S	Millisecond	234
E	Day in week	Tuesday
D	Day in year	360
F	Day of week in month	2 (second Wed. in July)
w	Week in year	40
W	Week in month	1
a	A.M./P.M. marker	PM
k	Hour in day (1~24)	24
K	Hour in A.M./P.M. (0~11)	10
z	Time zone	Eastern Standard Time
'	Escape for text	Delimiter
"	Single quote	`
For a complete list of constant available methods to manipulate date, you can refer to standard Java documentation.
Time Updater in Servlet
In this program we are going to make one program on servlet which will keep on updating the time in every second and the result will be displayed to you.
In this program we are going to make one program on servlet which will keep on updating the time in every second and the result will be displayed to you.

Time Updater in Servlet
         
In this program we are going to make one program on servlet which will keep on updating the time in every second and the result will be displayed to you. 
To make this servlet firstly we need to make a class named TimeUpdater.  The name of the class should be such that it becomes easy to understand what the program is going to do. Call the method getWriter() method of the response object which will return a PrintWriter object. Use the method getHeader() of the response object to add a new header. We can also use setHeader() in place of getHeader(). The setHeader() method overrides the previous set header. Now by using the PrintWriter object display the result on the browser.
The code of the program is given below:
 
import java.io.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class TimeUpdater extends HttpServlet {

public void doGet(HttpServletRequest request, HttpServletResponse response)
throws ServletException, IOException {
PrintWriter pw = response.getWriter();

response.addHeader("Refresh", "1");
pw.println(new Date().toString());
}
}
The output of the program is given below:
 
Consider a webpage which is displaying live game score or stock market status or currency exchange ration. For all such type of pages, you would need to refresh your web page regularly using refresh or reload button with your browser.
Java Servlet makes this job easy by providing you a mechanism where you can make a webpage in such a way that it would refresh automatically after a given interval.
The simplest way of refreshing a web page is using method setIntHeader() of response object. Following is the signature of this method \u2212
public void setIntHeader(String header, int headerValue)
This method sends back header "Refresh" to the browser along with an integer value which indicates time interval in seconds.
Auto Page Refresh Example
This example shows how a servlet performs auto page refresh using setIntHeader() method to set Refresh header.
// Import required java libraries
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
import java.util.*;
 
// Extend HttpServlet class
public class Refresh extends HttpServlet {
 
   // Method to handle GET method request.
   public void doGet(HttpServletRequest request, HttpServletResponse response)
      throws ServletException, IOException {
      
      // Set refresh, autoload time as 5 seconds
      response.setIntHeader("Refresh", 5);
 
      // Set response content type
      response.setContentType("text/html");
 
      // Get current time
      Calendar calendar = new GregorianCalendar();
      String am_pm;
      int hour = calendar.get(Calendar.HOUR);
      int minute = calendar.get(Calendar.MINUTE);
      int second = calendar.get(Calendar.SECOND);
      
      if(calendar.get(Calendar.AM_PM) == 0)
        am_pm = "AM";
      else
        am_pm = "PM";
 
      String CT = hour+":"+ minute +":"+ second +" "+ am_pm;
    
      PrintWriter out = response.getWriter();
      String title = "Auto Page Refresh using Servlet";
      String docType =
         "<!doctype html public \"-//w3c//dtd html 4.0 " + "transitional//en\">\n";
      
      out.println(docType +
         "<html>\n" +
         "<head><title>" + title + "</title></head>\n"+
         "<body bgcolor = \"#f0f0f0\">\n" +
         "<h1 align = \"center\">" + title + "</h1>\n" +
         "<p>Current Time is: " + CT + "</p>\n"
      );
   }
   
   // Method to handle POST method request.
   public void doPost(HttpServletRequest request, HttpServletResponse response)
      throws ServletException, IOException {
      
      doGet(request, response);
   }
}
Now let us compile the above servlet and create the following entries in web.xml
....
 <servlet>
     <servlet-name>Refresh</servlet-name>
     <servlet-class>Refresh</servlet-class>
 </servlet>
 
 <servlet-mapping>
     <servlet-name>Refresh</servlet-name>
     <url-pattern>/Refresh</url-pattern>
 </servlet-mapping>
....
Now call this servlet using URL http://localhost:8080/Refresh which would display current system time after every 5 seconds as follows. Just run the servlet and wait to see the result \u2212
Auto Page Refresh using Servlet

Current Time is: 9:44:50 PM
The format of the HTTP request and HTTP response messages are similar and will have following structure \u2212
\u2022	An initial status line + CRLF ( Carriage Return + Line Feed i.e. New Line )
\u2022	Zero or more header lines + CRLF
\u2022	A blank line, i.e., a CRLF
\u2022	An optional message body like file, query data or query output.
For example, a server response header looks as follows \u2212
HTTP/1.1 200 OK
Content-Type: text/html
Header2: ...
...
HeaderN: ...
   (Blank Line)
<!doctype ...>
<html>
   <head>...</head>
   <body>
      ...
   </body>
</html>
The status line consists of the HTTP version (HTTP/1.1 in the example), a status code (200 in the example), and a very short message corresponding to the status code (OK in the example).
Following is a list of HTTP status codes and associated messages that might be returned from the Web Server \u2212
Code	Message	Description
100	Continue	Only a part of the request has been received by the server, but as long as it has not been rejected, the client should continue with the request
101	Switching Protocols	The server switches protocol.
200	OK	The request is OK
201	Created	The request is complete, and a new resource is created
202	Accepted	The request is accepted for processing, but the processing is not complete.
203	Non-authoritative Information	 
204	No Content	 
205	Reset Content	 
206	Partial Content	 
300	Multiple Choices	A link list. The user can select a link and go to that location. Maximum five addresses
301	Moved Permanently	The requested page has moved to a new url
302	Found	The requested page has moved temporarily to a new url
303	See Other	The requested page can be found under a different url
304	Not Modified	 
305	Use Proxy	 
306	Unused	This code was used in a previous version. It is no longer used, but the code is reserved
307	Temporary Redirect	The requested page has moved temporarily to a new url.
400	Bad Request	The server did not understand the request
401	Unauthorized	The requested page needs a username and a password
402	Payment Required	You cannot use this code yet
403	Forbidden	Access is forbidden to the requested page
404	Not Found	The server cannot find the requested page.
405	Method Not Allowed	The method specified in the request is not allowed.
406	Not Acceptable	The server can only generate a response that is not accepted by the client.
407	Proxy Authentication Required	You must authenticate with a proxy server before this request can be served.
408	Request Timeout	The request took longer than the server was prepared to wait.
409	Conflict	The request could not be completed because of a conflict.
410	Gone	The requested page is no longer available.
411	Length Required	The "Content-Length" is not defined. The server will not accept the request without it.
412	Precondition Failed	The precondition given in the request evaluated to false by the server.
413	Request Entity Too Large	The server will not accept the request, because the request entity is too large.
414	Request-url Too Long	The server will not accept the request, because the url is too long. Occurs when you convert a "post" request to a "get" request with a long query information.
415	Unsupported Media Type	The server will not accept the request, because the media type is not supported.
417	Expectation Failed	 
500	Internal Server Error	The request was not completed. The server met an unexpected condition.
501	Not Implemented	The request was not completed. The server did not support the functionality required.
502	Bad Gateway	The request was not completed. The server received an invalid response from the upstream server.
503	Service Unavailable	The request was not completed. The server is temporarily overloading or down.
504	Gateway Timeout	The gateway has timed out.
505	HTTP Version Not Supported	The server does not support the "http protocol" version.
Methods to Set HTTP Status Code
The following methods can be used to set HTTP Status Code in your servlet program. These methods are available with HttpServletResponse object.
Sr.No.	Method & Description
1	public void setStatus ( int statusCode )
This method sets an arbitrary status code. The setStatus method takes an int (the status code) as an argument. If your response includes a special status code and a document, be sure to call setStatus before actually returning any of the content with the PrintWriter.
2	public void sendRedirect(String url)
This method generates a 302 response along with a Location header giving the URL of the new document
3	public void sendError(int code, String message)
This method sends a status code (usually 404) along with a short message that is automatically formatted inside an HTML document and sent to the client.
HTTP Status Code Example
Following is the example which would send a 407 error code to the client browser and browser would show you "Need authentication!!!" message.
// Import required java libraries
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
import java.util.*;

// Extend HttpServlet class
public class showError extends HttpServlet {
 
   // Method to handle GET method request.
   public void doGet(HttpServletRequest request, HttpServletResponse response)
      throws ServletException, IOException {
      
      // Set error code and reason.
      response.sendError(407, "Need authentication!!!" );
   }
   
   // Method to handle POST method request.
   public void doPost(HttpServletRequest request, HttpServletResponse response)
      throws ServletException, IOException {
      
      doGet(request, response);
   }
}
Now calling the above servlet would display the following result \u2212
HTTP Status 407 - Need authentication!!!

type Status report

messageNeed authentication!!!

descriptionThe client must first authenticate itself with the proxy (Need authentication!!!).

Apache Tomcat/5.5.29
Redirect The Page Randomly
In this section we will discuss how a page can be redirected randomly.
To solve the above task I used the random method of the class Math. This method generates +ve double value number greater than or equal to 0.0 and less than 1.0. In the example at first I created a list of pages which I have to redirected further set the status and header of the redirected page.
Example :
RandomRedirectServlet.java
import java.io.IOException;
import java.io.PrintWriter;
import java.util.*;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class RandomRedirectServlet extends HttpServlet
{
List l= new ArrayList();
public void init()
{
l.add("http://www.Devmanuals.com");
l.add("http://www.facebook.com");
l.add("http://www.Google.com");
l.add("http://www.rediffmail.com");
l.add("http://www.gmail.com");
}
public void doGet(HttpServletRequest req, HttpServletResponse res)
throws IOException, ServletException
{
res.setContentType("text/html");
Random rndm = new Random();
int listIndex = ((int)(Math.random()*l.size()));
String site = (String)l.get(listIndex);
res.setStatus(res.SC_MOVED_TEMPORARILY);
res.setHeader("Location", site);
}
}
web.xml
<web-app>
<display-name>SendRedirectExample</display-name>
<servlet>
<servlet-name>RandomRedirectServlet</servlet-name>
<servlet-class>RandomRedirectServlet</servlet-class>
</servlet>
<servlet-mapping>
<servlet-name>RandomRedirectServlet</servlet-name>
<url-pattern>/RandomRedirectServlet</url-pattern>
</servlet-mapping>
</web-app>
Output :
When you will execute this example you will get that every time a new web page is opened which are listed in the above example.
 
 
How to get client's address in a servlet
         
This is detailed java code to get client's address in a servlet. In this example we have used method getremoteAddr() of the ServletRequest interface which returns IP address of the client in the string format.
Syntax of the method :  java.lang.String getRemoteAddr()
We have used a jsp page that is used to send a request to a servlet that execute the request and find the ID address of the client's request. Before run this code create a new directory named "user" in the tomcat-6.0.16/webapps and paste WEB-INF directory in same directory.
get_address.jsp
<%@page language="java" session="true" 
contentType="text/html;charset=ISO-8859-1" %> 
<b><font color="blue">Please Enter your Full Name here:</font></b><br>
<form name="frm" method="get" action="../user/GetAddress">
    <table border = "0">
        <tr align="left" valign="top">
            <td>First Name:</td>
            <td><input type="text" name ="name" /></td>
        </tr>
        <tr align="left" valign="top">
            <td></td>
            <td><input type="submit" name="submit" value="submit"/></td>
        </tr>
    </table>
</form>
Save this code as a .jsp file named "get_address.jsp" in the directory Tomcat-6.0.16/webapps/user/ and you can run this jsp page with following url in address bar of the browser "http://localhost:8080/user/get_address.jsp"
GetAddress.java
import java.io.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;
public class GetAddress extends HttpServlet {
  public void doGet(HttpServletRequest request,
HttpServletResponse response)
    throws IOException, ServletException{
    response.setContentType("text/html");
    PrintWriter out = response.getWriter();    
    String name = request.getParameter("name");
	out.println("<h3>You have entered name : " + name + "<br>");	   
    out.println("<b><font color='blue'>
   IP Address of request : </font></b>"
	+request.getRemoteAddr()+"<h3>");
  }
}
Compile this java code and save .class file in directory C:\apache-tomcat-6.0.16\webapps\user\WEB-INF\classes.
web.xml
<servlet>
    <servlet-name>GetAddress</servlet-name>
    <servlet-class>GetAddress</servlet-class>
</servlet> 
<servlet-mapping>
    <servlet-name>GetAddress</servlet-name>
    <url-pattern>/GetAddress</url-pattern>
</servlet-mapping>
This is web .xml file use to map servlet. When run jsp page in the browser.....
 
User enters first name and click on submit button.......
 
1.	
<html>  
2.	<head>  
3.	<meta charset="ISO-8859-1">  
4.	<title>sendRedirect example</title>  
5.	</head>  
6.	<body>  
7.	  
8.	  
9.	<form action="MySearcher">  
10.	<input type="text" name="name">  
11.	<input type="submit" value="Google Search">  
12.	</form>  
13.	  
14.	</body>  
15.	</html>  
MySearcher.java
1.	import java.io.IOException;  
2.	import javax.servlet.ServletException;  
3.	import javax.servlet.http.HttpServlet;  
4.	import javax.servlet.http.HttpServletRequest;  
5.	import javax.servlet.http.HttpServletResponse;  
6.	  
7.	public class MySearcher extends HttpServlet {  
8.	    protected void doGet(HttpServletRequest request, HttpServletResponse response)  
9.	            throws ServletException, IOException {  
10.	  
11.	        String name=request.getParameter("name");  
12.	        response.sendRedirect("https://www.google.co.in/#q="+name);  
13.	    }  
14.	}  
________________________________________
download this example (developed in Eclipse)
________________________________________
Output
 
 
Next TopicServletconfig Example

